#!/usr/bin/env Rscript

# This script is meant to be called ./configure, so I don't assume {scribe} is available

scribe_lib <- Sys.getenv("SCRIBE_PATH", "~/R/scribe")

if (!requireNamespace("scribe", scribe_lib, quietly = TRUE)) {
  message("w {scribe} not found")
  message("i installing {scribe}")
  utils::install.packages("scribe", repos = c(CRAN = "https://cran.rstudio.com/"))
  stop("q please run pak-install again")
}

options(pak.no_extra_messages = TRUE)

library(scribe, lib.loc = scribe_lib)
ca <- command_args()
ca$add_argument(
  "...",
  "source",
  action = "dots",
  default = "cran",
  options = list(choices = c("cran", "source")),
  info = "Source to install"
)
ca$add_argument(
  "--pkg-type",
  default = .Platform$pkgType
)
ca$add_argument(
  "--os",
  default = R.Version()$os,
  info = "operating system"
)
ca$add_argument(
  "--arch",
  default = R.Version()$arch
)
ca$add_argument(
  "-d",
  "--dependencies",
  default = NA
)
ca$add_argument(
  "-r",
  "--reinstall",
  default = FALSE,
  action = "flag",
  info = "pak pak pak"
)
ca$add_argument(
  "--extra-messages",
  action = "flag",
  default = TRUE,
  info = "show extra pak messages"
)
ca$add_argument(
  "--lib-path",
  default = Sys.getenv("R_LIBS_PAK", "~/R/pak-library"),
  info = "library path to install pak to"
)

args <- ca$parse()

# if on linux, check for build-essential
if (startsWith(args$os, "linux")) {
  if (system2("dpkg", "-s build-essential", stdout = FALSE, stderr = FALSE) != 0) {
    stop(
      "q need to install build-essential, please run the following command:\n",
      "$ sudo apt install build-essential"
    )
  }
}

switch(
  args$source,
  cran = {
    message("i installing {pak} from CRAN")
    repo <- c(CRAN = "https://cran.rstudio.com/")
    text <- "CRAN"
  },
  source = {
    message("i installing {pak} from source")
    repo <- sprintf(
      "https://r-lib.github.io/p/pak/stable/%s/%s/%s",
      args$pkg_type,
      args$os,
      args$arch
    )
    text <- "pre-built binary"
  }
)

message("i checking for libpath: ", normalizePath(args$lib_path, "/", FALSE))
dir.create(args$lib_path, recursive = TRUE, showWarnings = FALSE)

if (!args$reinstall) {
  message("i installing {pak} ", text)
  # https://github.com/r-lib/pak#pre-built-binaries
  utils::install.packages(
    "pak",
    repos = repo,
    dependencies = args$dependencies,
    lib = args$lib_path
  )
}

message("i setting libpath")
.libPaths(args$lib_path)
library(pak, lib.loc = args$lib_path)

if (args$reinstall) {
  message("i reinstalling {pak} ", text)
  pak(
    "pak?reinstall",
    dependencies = args$dependencies,
    lib = args$lib_path
  )
}

message("i installing {pak} extra")
pak_install_extra()

message("i done")
invisible()
