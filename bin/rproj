#!/usr/bin/env Rscript
# Find and open an Rproj files
# 
# This assumes either $R_USER or $HOME/Documents have Bitbucket or Github
# folders.  This also only searches for the matching $1.Rproj file -- ignores
# whatever the folder name may be.

stopifnot(packageVersion("scribe") >= "0.1.0.9002")

library(scribe)
ca <- command_args()
ca$add_description("Find an .Rproj file and open it in its default application")
ca$add_description(
  "This assumes either that the project file can be found in one of these",
  " directories: $GH_HOME, $R_USER, $HOME.  The actual name of the folder",
  " doesn't matter."
)
ca$add_example("rproj mark")
ca$add_example("rproj scribe --verbose")
ca$add_example("rproj .")
ca$add_argument(
  "-v",
  "--verbose",
  action = "flag",
  default = FALSE,
  info = "When set, prints out additional messages"
)
ca$add_argument(
  "-c",
  "--code",
  action = "flag",
  default = FALSE,
  info = "When set, calls the folder containing the .Rproj file with `code`"
)
ca$add_argument(
  "name",
  default = ".",
  info = "The name of the the file.  Use '.' to search the current directory"
)
params <- ca$parse()

if (!length(params$name)) {
  stop("No Rproj provided")
}

msg <- if (params$verbose) {
  # 24 is currently the longest message...
  function(x, ...)  message("i ", format(x, width = 24), ...)
} else {
  function(...) invisible()
}

if (identical(params$name, ".")) {
  # why this? because it enforces that the file must be in the usually
  # directory, and because I don't want to resolve symbolic links
  params$name <- fs::dir_ls(".", glob = "*.Rproj", type = "file", recurse = 2)
  params$name <- mark::file_name(params$name)
}

# TODO better check for missing parameters
homedir <- Sys.getenv("GH_HOME", Sys.getenv("R_USER", Sys.getenv("HOME")))
homedir <- fs::path_norm(homedir)

if (!fs::dir_exists(homedir)) {
  stop("Home directory does not exist: ", homedir)
}

msg("Using home directory: ", homedir)
setwd(homedir)

reg <- sprintf(".*%s(\\.Rproj)?$", params$name)
msg("Searching with regex:   ", reg)

found <- fs::dir_ls(regexp = reg, recurse = 3, type = c("file", "directory"))
found <- found[mark::file_name(tolower(found)) == tolower(params$name)]

n <- length(found)

if (n == 0L) {
  stop("no ", params$name, " found")
}

dirs <- fs::is_dir(found)
found <- c(
  found[!dirs],
  unlist(lapply(found[dirs], fs::dir_ls, glob = "*.Rproj", type = "directory"))
)

if (length(found) > 1L) {
  msg(
    "Found multiple matches: ", toString(found),
    "Only using first"
  )
}

found <- found[1]

if (fs::is_dir(found)) {
  found <- fs::dir_ls(found, glob = "*.Rproj", type = "file")[1]
}

found <- fs::path_abs(found)

if (isTRUE(params$code)) {
  found <- dirname(found)
  fun <- function(x) {
    # code didn't seem to work that well with xopen()
    code <- Sys.which("code")
    cat("Running", code, found, "\n")
    invisible(system2(code, found, stdout = TRUE))
  }
} else {
  fun <- function(x) xopen::xopen(x)
}

msg("Trying to open: ", found)
fun(found)
