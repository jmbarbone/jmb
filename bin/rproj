#!/usr/bin/env Rscript
# Find and open an Rproj files
#
# This assumes either $R_USER or $HOME/Documents have Bitbucket or Github
# folders.  This also only searches for the matching $1.Rproj file -- ignores
# whatever the folder name may be.

scribe_lib <- Sys.getenv("R_LIBS_SCRIBE", "~/R/scribe-library")

stopifnot(packageVersion("scribe", scribe_lib) >= "0.1.0.9002")
library(scribe, lib.loc = scribe_lib)
ca <- command_args()
ca$add_description("Find an .Rproj file and open it in its default application")
ca$add_description(
  "This assumes either that the project file can be found in one of these",
  " directories: $GH_HOME, $R_USER, $HOME.  The actual name of the folder",
  " doesn't matter."
)
ca$add_example("rproj mark")
ca$add_example("rproj scribe --verbose")
ca$add_example("rproj local::mark")
ca$add_argument(
  "name",
  default = "local::.",
  info = "The name of the the file.  Use 'local::.' to search a directory"
)
ca$add_argument(
  "-v",
  "--verbose",
  action = "flag",
  default = TRUE,
  info = "When set, prints out additional messages"
)
ca$add_argument(
  "-m",
  "--method",
  action = "list",
  default = "Rproj",
  options = list(choices = c("Rproj", "code", "positron")),
  info = "Method for opening the project"
)
ca$add_argument(
  "-r",
  "--recurse",
  action = "list",
  default = 3L,
  info = "Level of recursiveness to set for folder finds"
)
params <- ca$parse()

msg <- if (params$verbose) message else function(...) invisible()

fs_dir_ls <- function(..., recurse = FALSE) {
  x <- lapply(recurse, function(x) fs::dir_ls(..., recurse = x))
  x <- lapply(x, sort)
  fs::path(unique(unlist(x)))
}

do_open <- function(path) {
  n <- length(path)
  if (n == 0) {
    msg("e No paths found")
    str(params)
    stop()
  }
  if (n > 1) {
    found <- sort(path)
    msg("w Found ", n, " possible matches, using first")
    cat(paste0("  ", path), sep = "\n")
    path <- path[1L]
  }

  msg("i Opening ", path)
  switch(
    params$method,
    Rproj = xopen::xopen(path),
    system2(Sys.which(params$method), path)
  )
}

if (identical(params$name, ".")) {
  params$name <- "local::."
}

if (startsWith(params$name, "local::")) {
  path <- substr(params$name, 8L, nchar(params$name))
  path <- normalizePath(path, "/", TRUE)
  if (params$method == "Rproj") {
    path <- fs_dir_ls(path, glob = "*.Rproj", type = "file")
  }
  do_open(path)
} else {
  homedir <- Sys.getenv("GH_HOME", Sys.getenv("R_USER", Sys.getenv("HOME")))
  homedir <- fs::path_norm(homedir)

  if (!fs::dir_exists(homedir)) {
    stop("Home directory does not exist: ", homedir)
  }

  msg("i Using home directory: ", homedir)

  path <- switch(
    params$method,
    Rproj = {
      fs_dir_ls(
        homedir,
        glob = paste0("*", params$name, ".Rproj"),
        type = "file",
        recurse = params$recurse
      )
    },
    fs_dir_ls(
      homedir,
      glob = paste0("*", params$name),
      type = "dir",
      recurse = TRUE
    )
  )

  do_open(path)
}
