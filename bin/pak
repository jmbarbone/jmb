#!/usr/bin/env -S Rscript --vanilla

# pak for pak

if (packageVersion("scribe") < "0.2") {
  warning(
    "some features may not work properly, try:\n",
    "$ pak --update-scribe",
    "\n...or\n",
    "$ pak --update-scribe-dev",
    call. = FALSE
  )
}

library(scribe)
ca <- command_args()

ca$add_description("pak : R package installation")
ca$add_description("console wrapper for calling pak::pak() from R, with some extra features")

ca$add_example("pak fuj", "install {fuj} from CRAN")
ca$add_example("pak --d true -u github::tidyverse/dplyr github::tidyverse/tidyr", "install dev packages")

ca$add_argument(
  "...",
  "pkg",
  default = "local::.",
  info = "packages to install (default: local::.)"
)$add_argument(
  "-d",
  "--dep",
  "--dependencies",
  default = NA,
  info = "dependencies (coerced)"
)$add_argument(
  "-u", 
  "--upgrade",
  action = "flag",
  default = FALSE,
  info = "use most recent version of packages"
)$add_argument(
  "--update",
  action = "flag",
  default = TRUE,
  info = "install new versions of packages"
)$add_argument(
  "--sysreqs",
  action = "flag",
  default = FALSE,
  info = "Tries to install system requirements"
)$add_argument(
  "-e",
  "--echo",
  action = "flag",
  default = FALSE,
  info = "Echo the lock file"
)$add_argument(
  "--lib",
  action = "list",
  default = .libPaths()[1],
  info = "library location for plan and installation"
)$add_argument(
  "--lib-create",
  action = "list",
  default = NULL,
  info = c(
    "library location used for creating installation plan",
    "when NULL defaults to --lib-loc"
  )
)$add_argument(
  "--lib-install",
  action = "list",
  default = NULL,
  info = c(
    "library location to install pkgs",
    "defaults to --lib-loc"
  )
)$add_argument(
  "--update-scribe",
  action = "flag",
  options = list(no = FALSE),
  info = "Early exit to install CRAN version of {scribe}"
)$add_argument(
  "--update-scribe-dev",
  action = "flag",
  options = list(no = FALSE),
  info = "Early exit to install development version of {scribe} from GitHub"
)$add_argument(
  "--cran-repos",
  default = Sys.getenv("CRAN_REPOS", "https://cloud.r-project.org"),
  action = "list",
  info = "Sets the repository"
)$add_argument(
  "--extra-messages",
  default = TRUE,
  action = "flag",
  info = "sets options(pak.no_extra_messages)"
)

args <- ca$parse()

if (args$update_scribe) {
  pak::pak("scribe")
  quit()
}

if (args$update_scribe_dev) {
  pak::pak("github::jmbarbone/scribe")
  quit()
}

pak_install <- function(
  pkgs,
  lib = .libPaths()[1],
  upgrade = FALSE,
  dependencies = NA,
  update = TRUE,
  sysreqs = FALSE,
  echo = FALSE,
  lib_create = lib,
  lib_install = lib,
  repos = "https://cloud.r-project.org",
  extra_messages = TRUE,
  ...
) {
  op <- options(
    repos = c(CRAN = repos),
    pak.no_extra_messages = extra_messages
  )
  on.exit(options(op))

  if (is.null(lib_create)) {
    lib_create <- lib
  }

  if (is.null(lib_install)) {
    lib_install <- lib
  }

  if (sysreqs) {
    Sys.setenv(PKG_SYSREQS = "true")
  } else {
    Sys.setenv(PKG_SYSREQS = "false")
  }

  lockfile <- tempfile()
  on.exit(unlink(lockfile), add = TRUE)

  print_eval(
    pak::lockfile_create,
    pkg = pkgs,
    lockfile = lockfile,
    lib = lib_create,
    dependencies = dependencies,
    upgrade = upgrade
  )

  if (echo) {
    writeLines(readLines(lockfile))
  }

  print_eval(
    pak::lockfile_install,
    lockfile = lockfile,
    lib = lib_install,
    update = update
  )
}

# TODO consider saving this somewhere
print_eval <- function(fun, ...) {
  fun <- substitute(fun)
  call <- as.call(do.call(alist, c(fun, list(...))))
  writeLines(format(call, width = min(getOption("width") - 4, 80)))
  eval(as.expression(call))
}

do.call(pak_install, args)
