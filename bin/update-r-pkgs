#!/usr/bin/env Rscript

options(
  repos = c(
    if (.Platform$OS.type == "unix") {
      c(
        CRAN = sprintf(
          "https://packagemanager.posit.co/cran/__linux__/%s/latest",
          system2("lsb_release", "-cs", stdout = TRUE)
        )
      )
    },
    CRAN = "https://packagemanager.posit.co/cran/latest",
    CRAN = "https://cran.rstudio.com/"
  )
)

library(scribe, lib.loc = Sys.getenv("R_LIBS_SCRIBE", "~/R/scribe-library"))
ca <- command_args()
ca$add_argument("...", "ignore", default = character())
ca$add_argument("-u", "--upgrade", action = "flag", default = FALSE)
ca$add_argument("-d", "--dep", "--dependencies", default = NA)
ca$add_argument("-v", "--verbose", action = "flag")
ca$add_argument(
  "--dry",
  action = "flag",
  default = FALSE,
  info = "Dry run, do not install packages"
)
args <- ca$parse()

# FIXME need to implement default for dots
args$ignore <- unique(c(args$ignore, "pak", "scribe"))

msg <- function(...) cat("i ", ..., "\n", sep = "")

msg("Checking for old packages")
libs <- .libPaths()

if (args$verbose) {
  msg("Library path(s): ", paste("\n ", libs))
}

pkgs <- lapply(libs, function(lib) {
  setdiff(row.names(utils::old.packages(lib.loc = lib)), args$ignore)
})

if (length(args$ignore)) {
  args$ignore <- paste0(args$ignore, "=?ignore")
}

ok <- lengths(pkgs) > 0
libs <- libs[ok]
pkgs <- pkgs[ok]

n <- sum(lengths(pkgs))
if (args$verbose) {
  msg(
    "Old packages found: (", n, ")",
    vapply(
      seq_along(libs),
      function(i) {
        paste0(
          "\n  ",
          libs[i], " (", length(pkgs[[i]]), ")",
          paste0("\n    ", pkgs[[i]], collapse = ""),
          collapse = ""
        )
      },
      NA_character_
    )
  )
}

if (n == 0L && args$verbose) {
  msg("No old packages found")
  msg("Exiting")
  quit()
}

library(pak, Sys.getenv("R_LIBS_PAK", lib.loc = "~/R/pak-library"))

if (args$dry) {
  msg("Dry run, exiting")
  quit()
}

for (i in seq_along(libs)) {
  if (length(pkgs[[i]]) == 0L) {
    next
  }

  try(pkg_install(
    pkg = c(pkgs[[i]], args$ignore),
    lib = libs[i],
    upgrade = args$upgrade,
    dependencies = args$dependencies,
    ask = FALSE
  ))
}
